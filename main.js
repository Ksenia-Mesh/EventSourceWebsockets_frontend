(()=>{"use strict";function e(e,s){return`\n    <div class="user ${s}" data-id="${e.id}">\n      <div class="userAvatar"></div>\n      ${s?`\n        <p class="userName" title="${e.name}">You</p>`:`<p class="userName">${e.name}</p>`}\n    </div>\n  `}function s(e,s){return`\n    ${s?`<div class="message ${s}">\n        <p class="messageAuthor ${s}">You, \n          <span class="messagedate ${s}">${e.date.toLocaleString()}</span>\n        </p>`:`<div class="message">\n        <p class="messageAuthor">${e.from}, \n          <span class="messagedate">${e.date.toLocaleString()}</span>\n          </p>`}\n      <p class="messageСontent">${e.message}</p>\n    </div>\n  `}class t{constructor(e){this.url=e,this.contentTypeHeader={"Content-Type":"application/json"}}load(){return fetch(this.url)}send(e){return fetch(this.url,{body:JSON.stringify(e),method:"POST",headers:this.contentTypeHeader})}}function n(){const e=new Date;return`${String(e.getHours()).padStart(2,"0")}:${String(e.getMinutes()).padStart(2,"0")} ${String(e.getDate()+1).padStart(2,"0")}.${String(e.getMonth()+1).padStart(2,"0")}.${e.getFullYear()}\n  `}class r{constructor(e,s){this.currentUser=s,this.users=[],this.messages=[],this.container=e,this.listUsers=e.querySelector(".listUsers"),this.form=e.querySelector(".chatForm"),this.input=e.querySelector("input"),this.ws=new WebSocket("ws://whispering-plains-26441.herokuapp.com/ws")}async init(){this.ws.addEventListener("open",(()=>{console.log("connected"),this.ws.send("hello")})),this.ws.addEventListener("message",(e=>{[this.users,this.messages]=JSON.parse(e.data),this.getUsers(this.users),this.getMessages(this.messages)})),this.ws.addEventListener("close",(async e=>{console.log("connection closed",e)})),this.ws.addEventListener("error",(()=>{console.log("error")})),this.ws.readyState===WebSocket.OPEN&&this.ws.send("new user"),this.form.addEventListener("submit",(e=>this.sendMessage(e)))}getUsers(s){if(!this.listUsers.querySelector(".user"))for(const t of s)t.name===this.currentUser&&this.listUsers.insertAdjacentHTML("beforeend",e(t,"You")),t.name!==this.currentUser&&this.listUsers.insertAdjacentHTML("beforeend",e(t))}getMessages(e){const t=this.container.querySelector(".listMessages");t.innerHTML="",e.forEach((e=>{e.from===this.currentUser&&t.insertAdjacentHTML("beforeend",s(e,"You")),e.from!==this.currentUser&&t.insertAdjacentHTML("beforeend",s(e))}))}async sendMessage(e){e.preventDefault();const s={message:this.input.value,from:this.currentUser,date:n()},r=new t("https://whispering-plains-26441.herokuapp.com/message"),a=await r.send(s);200===a.status&&a.ok&&(this.input.value="",this.ws.readyState===WebSocket.OPEN&&this.ws.send("message"))}}!function(e,s){e.insertAdjacentHTML("afterbegin",'\n    <form class="loginForm">\n      <h2 class="header">Выберите псевдоним</h2>\n      <input class="loginForm_input" name="name">\n      <button class="btn">Продолжить</button>\n    </form>\n  ');const n=e.querySelector(".loginForm");n.addEventListener("submit",(async a=>{a.preventDefault();const i=new t(`${s}/login`),o=a.target.querySelector(".loginForm_input");if(o.value){const s={name:o.value},t=await i.send(s);if(204===t.status&&t.ok)n.reset(),n.remove(),function(e,s){e.insertAdjacentHTML("afterbegin",'\n    <div class="container">\n      <div class="listUsers"></div>\n      <div class="chat">\n        <div class="listMessages"></div>\n        <form class="chatForm">\n          <input type="text" placeholder="Type your message here">\n        </form>\n      </div>\n    </div>\n  ');const t=e.querySelector(".container");new r(t,s).init()}(e,s.name);else{o.classList.add("inputEmpty"),n.insertAdjacentHTML("beforeend",'<div class="warning">Пользователь с таким именем уже существует.</div>');const e=document.querySelector(".warning");setTimeout((()=>{o.classList.remove("inputEmpty"),e.remove()}),2e3)}}else o.classList.add("inputEmpty"),setTimeout((()=>o.classList.remove("inputEmpty")),2e3)}))}(document.querySelector(".board"),"http://localhost:7070")})();